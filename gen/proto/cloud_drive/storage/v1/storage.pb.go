// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: proto/cloud_drive/storage/v1/storage.proto

package v1

import (
	v1 "github.com/EdgeStanding/cloud-drive-proto/gen/proto/cloud_drive/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateUploadRequestRequest 创建上传请求的请求消息
type CreateUploadRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`  // 文件块的哈希值
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"` // 文件块的大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUploadRequestRequest) Reset() {
	*x = CreateUploadRequestRequest{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUploadRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUploadRequestRequest) ProtoMessage() {}

func (x *CreateUploadRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUploadRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateUploadRequestRequest) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUploadRequestRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CreateUploadRequestRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// CreateUploadRequestResponse 创建上传请求的响应消息
type CreateUploadRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadUrl     string                 `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"` // 上传地址
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // 上传地址的过期时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUploadRequestResponse) Reset() {
	*x = CreateUploadRequestResponse{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUploadRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUploadRequestResponse) ProtoMessage() {}

func (x *CreateUploadRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUploadRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateUploadRequestResponse) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUploadRequestResponse) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *CreateUploadRequestResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// CompleteChunkUploadRequest 完成上传请求的请求消息
type CompleteChunkUploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // 文件块的哈希值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteChunkUploadRequest) Reset() {
	*x = CompleteChunkUploadRequest{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteChunkUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteChunkUploadRequest) ProtoMessage() {}

func (x *CompleteChunkUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteChunkUploadRequest.ProtoReflect.Descriptor instead.
func (*CompleteChunkUploadRequest) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{2}
}

func (x *CompleteChunkUploadRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// CompleteChunkUploadResponse 完成上传请求的响应消息
type CompleteChunkUploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 错误信息（如果有）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteChunkUploadResponse) Reset() {
	*x = CompleteChunkUploadResponse{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteChunkUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteChunkUploadResponse) ProtoMessage() {}

func (x *CompleteChunkUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteChunkUploadResponse.ProtoReflect.Descriptor instead.
func (*CompleteChunkUploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{3}
}

func (x *CompleteChunkUploadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CompleteChunkUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GetChunkDownloadURLRequest 获取下载地址的请求消息
type GetChunkDownloadURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hashes        []*v1.OrderedHash      `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkDownloadURLRequest) Reset() {
	*x = GetChunkDownloadURLRequest{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkDownloadURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkDownloadURLRequest) ProtoMessage() {}

func (x *GetChunkDownloadURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkDownloadURLRequest.ProtoReflect.Descriptor instead.
func (*GetChunkDownloadURLRequest) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{4}
}

func (x *GetChunkDownloadURLRequest) GetHashes() []*v1.OrderedHash {
	if x != nil {
		return x.Hashes
	}
	return nil
}

// GetChunkDownloadURLResponse 获取下载地址的响应消息
type GetChunkDownloadURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Urls          []*ChunkDownloadURL    `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`                            // 下载地址列表
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // 下载地址的过期时间
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                           // 文件块的大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkDownloadURLResponse) Reset() {
	*x = GetChunkDownloadURLResponse{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkDownloadURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkDownloadURLResponse) ProtoMessage() {}

func (x *GetChunkDownloadURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkDownloadURLResponse.ProtoReflect.Descriptor instead.
func (*GetChunkDownloadURLResponse) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{5}
}

func (x *GetChunkDownloadURLResponse) GetUrls() []*ChunkDownloadURL {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *GetChunkDownloadURLResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *GetChunkDownloadURLResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ChunkDownloadURL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         uint64                 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"` // 文件块的哈希值
	Urls          []*StorageURL          `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"` // 下载地址列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkDownloadURL) Reset() {
	*x = ChunkDownloadURL{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkDownloadURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkDownloadURL) ProtoMessage() {}

func (x *ChunkDownloadURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkDownloadURL.ProtoReflect.Descriptor instead.
func (*ChunkDownloadURL) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkDownloadURL) GetOrder() uint64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ChunkDownloadURL) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ChunkDownloadURL) GetUrls() []*StorageURL {
	if x != nil {
		return x.Urls
	}
	return nil
}

type StorageURL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageName   string                 `protobuf:"bytes,1,opt,name=storage_name,json=storageName,proto3" json:"storage_name,omitempty"` // 存储名称
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                                    // 下载地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageURL) Reset() {
	*x = StorageURL{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageURL) ProtoMessage() {}

func (x *StorageURL) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageURL.ProtoReflect.Descriptor instead.
func (*StorageURL) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{7}
}

func (x *StorageURL) GetStorageName() string {
	if x != nil {
		return x.StorageName
	}
	return ""
}

func (x *StorageURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ChunkExistsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // 文件块的哈希值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkExistsRequest) Reset() {
	*x = ChunkExistsRequest{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkExistsRequest) ProtoMessage() {}

func (x *ChunkExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkExistsRequest.ProtoReflect.Descriptor instead.
func (*ChunkExistsRequest) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{8}
}

func (x *ChunkExistsRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ChunkExistsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replicas      int64                  `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"` // 文件块的副本数
	Exists        bool                   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`     // 文件块是否存在
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkExistsResponse) Reset() {
	*x = ChunkExistsResponse{}
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkExistsResponse) ProtoMessage() {}

func (x *ChunkExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cloud_drive_storage_v1_storage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkExistsResponse.ProtoReflect.Descriptor instead.
func (*ChunkExistsResponse) Descriptor() ([]byte, []int) {
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP(), []int{9}
}

func (x *ChunkExistsResponse) GetReplicas() int64 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ChunkExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

var File_proto_cloud_drive_storage_v1_storage_proto protoreflect.FileDescriptor

var file_proto_cloud_drive_storage_v1_storage_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x77, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x51, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7a, 0x0a, 0x10,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x04, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55,
	0x52, 0x4c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x41, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x28, 0x0a, 0x12, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x49, 0x0a, 0x13, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x32, 0xb3, 0x04, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cloud_drive_storage_v1_storage_proto_rawDescOnce sync.Once
	file_proto_cloud_drive_storage_v1_storage_proto_rawDescData = file_proto_cloud_drive_storage_v1_storage_proto_rawDesc
)

func file_proto_cloud_drive_storage_v1_storage_proto_rawDescGZIP() []byte {
	file_proto_cloud_drive_storage_v1_storage_proto_rawDescOnce.Do(func() {
		file_proto_cloud_drive_storage_v1_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cloud_drive_storage_v1_storage_proto_rawDescData)
	})
	return file_proto_cloud_drive_storage_v1_storage_proto_rawDescData
}

var file_proto_cloud_drive_storage_v1_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_cloud_drive_storage_v1_storage_proto_goTypes = []any{
	(*CreateUploadRequestRequest)(nil),  // 0: proto.cloud_drive.storage.v1.CreateUploadRequestRequest
	(*CreateUploadRequestResponse)(nil), // 1: proto.cloud_drive.storage.v1.CreateUploadRequestResponse
	(*CompleteChunkUploadRequest)(nil),  // 2: proto.cloud_drive.storage.v1.CompleteChunkUploadRequest
	(*CompleteChunkUploadResponse)(nil), // 3: proto.cloud_drive.storage.v1.CompleteChunkUploadResponse
	(*GetChunkDownloadURLRequest)(nil),  // 4: proto.cloud_drive.storage.v1.GetChunkDownloadURLRequest
	(*GetChunkDownloadURLResponse)(nil), // 5: proto.cloud_drive.storage.v1.GetChunkDownloadURLResponse
	(*ChunkDownloadURL)(nil),            // 6: proto.cloud_drive.storage.v1.ChunkDownloadURL
	(*StorageURL)(nil),                  // 7: proto.cloud_drive.storage.v1.StorageURL
	(*ChunkExistsRequest)(nil),          // 8: proto.cloud_drive.storage.v1.ChunkExistsRequest
	(*ChunkExistsResponse)(nil),         // 9: proto.cloud_drive.storage.v1.ChunkExistsResponse
	(*timestamppb.Timestamp)(nil),       // 10: google.protobuf.Timestamp
	(*v1.OrderedHash)(nil),              // 11: proto.cloud_drive.common.v1.OrderedHash
}
var file_proto_cloud_drive_storage_v1_storage_proto_depIdxs = []int32{
	10, // 0: proto.cloud_drive.storage.v1.CreateUploadRequestResponse.expires_at:type_name -> google.protobuf.Timestamp
	11, // 1: proto.cloud_drive.storage.v1.GetChunkDownloadURLRequest.hashes:type_name -> proto.cloud_drive.common.v1.OrderedHash
	6,  // 2: proto.cloud_drive.storage.v1.GetChunkDownloadURLResponse.urls:type_name -> proto.cloud_drive.storage.v1.ChunkDownloadURL
	10, // 3: proto.cloud_drive.storage.v1.GetChunkDownloadURLResponse.expires_at:type_name -> google.protobuf.Timestamp
	7,  // 4: proto.cloud_drive.storage.v1.ChunkDownloadURL.urls:type_name -> proto.cloud_drive.storage.v1.StorageURL
	0,  // 5: proto.cloud_drive.storage.v1.StorageService.CreateUploadRequest:input_type -> proto.cloud_drive.storage.v1.CreateUploadRequestRequest
	2,  // 6: proto.cloud_drive.storage.v1.StorageService.CompleteChunkUpload:input_type -> proto.cloud_drive.storage.v1.CompleteChunkUploadRequest
	4,  // 7: proto.cloud_drive.storage.v1.StorageService.GetChunkDownloadURL:input_type -> proto.cloud_drive.storage.v1.GetChunkDownloadURLRequest
	8,  // 8: proto.cloud_drive.storage.v1.StorageService.ChunkExists:input_type -> proto.cloud_drive.storage.v1.ChunkExistsRequest
	1,  // 9: proto.cloud_drive.storage.v1.StorageService.CreateUploadRequest:output_type -> proto.cloud_drive.storage.v1.CreateUploadRequestResponse
	3,  // 10: proto.cloud_drive.storage.v1.StorageService.CompleteChunkUpload:output_type -> proto.cloud_drive.storage.v1.CompleteChunkUploadResponse
	5,  // 11: proto.cloud_drive.storage.v1.StorageService.GetChunkDownloadURL:output_type -> proto.cloud_drive.storage.v1.GetChunkDownloadURLResponse
	9,  // 12: proto.cloud_drive.storage.v1.StorageService.ChunkExists:output_type -> proto.cloud_drive.storage.v1.ChunkExistsResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_cloud_drive_storage_v1_storage_proto_init() }
func file_proto_cloud_drive_storage_v1_storage_proto_init() {
	if File_proto_cloud_drive_storage_v1_storage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cloud_drive_storage_v1_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cloud_drive_storage_v1_storage_proto_goTypes,
		DependencyIndexes: file_proto_cloud_drive_storage_v1_storage_proto_depIdxs,
		MessageInfos:      file_proto_cloud_drive_storage_v1_storage_proto_msgTypes,
	}.Build()
	File_proto_cloud_drive_storage_v1_storage_proto = out.File
	file_proto_cloud_drive_storage_v1_storage_proto_rawDesc = nil
	file_proto_cloud_drive_storage_v1_storage_proto_goTypes = nil
	file_proto_cloud_drive_storage_v1_storage_proto_depIdxs = nil
}
