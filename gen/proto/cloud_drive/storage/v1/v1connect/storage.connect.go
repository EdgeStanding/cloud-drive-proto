// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/cloud_drive/storage/v1/storage.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/EdgeStanding/cloud-drive-proto/gen/proto/cloud_drive/storage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "proto.cloud_drive.storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServiceCreateUploadRequestProcedure is the fully-qualified name of the StorageService's
	// CreateUploadRequest RPC.
	StorageServiceCreateUploadRequestProcedure = "/proto.cloud_drive.storage.v1.StorageService/CreateUploadRequest"
	// StorageServiceCompleteChunkUploadProcedure is the fully-qualified name of the StorageService's
	// CompleteChunkUpload RPC.
	StorageServiceCompleteChunkUploadProcedure = "/proto.cloud_drive.storage.v1.StorageService/CompleteChunkUpload"
	// StorageServiceGetChunkDownloadURLProcedure is the fully-qualified name of the StorageService's
	// GetChunkDownloadURL RPC.
	StorageServiceGetChunkDownloadURLProcedure = "/proto.cloud_drive.storage.v1.StorageService/GetChunkDownloadURL"
)

// StorageServiceClient is a client for the proto.cloud_drive.storage.v1.StorageService service.
type StorageServiceClient interface {
	// CreateUploadRequest 创建一个上传请求，生成上传地址并返回给调用者。
	// 这里不负责上传，上传是交给其他程序进行的。
	// 这里只负责生成上传地址，并返回给调用者。
	// 但是这里需要使用文件块的方式
	CreateUploadRequest(context.Context, *connect.Request[v1.CreateUploadRequestRequest]) (*connect.Response[v1.CreateUploadRequestResponse], error)
	// CompleteChunkUpload 完成一个上传请求
	// 当客户端通过链接上传完毕后，将调用这个方法。这个方法将会对已经上传的内容进行验证
	CompleteChunkUpload(context.Context, *connect.Request[v1.CompleteChunkUploadRequest]) (*connect.Response[v1.CompleteChunkUploadResponse], error)
	// GetChunkDownloadURL 获取分块的下载地址
	// 这里不负责下载，下载是交给其他程序进行的。
	// 这里只负责生成下载地址，并返回给调用者。
	GetChunkDownloadURL(context.Context, *connect.Request[v1.GetChunkDownloadURLRequest]) (*connect.Response[v1.GetChunkDownloadURLResponse], error)
}

// NewStorageServiceClient constructs a client for the proto.cloud_drive.storage.v1.StorageService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storageServiceMethods := v1.File_proto_cloud_drive_storage_v1_storage_proto.Services().ByName("StorageService").Methods()
	return &storageServiceClient{
		createUploadRequest: connect.NewClient[v1.CreateUploadRequestRequest, v1.CreateUploadRequestResponse](
			httpClient,
			baseURL+StorageServiceCreateUploadRequestProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateUploadRequest")),
			connect.WithClientOptions(opts...),
		),
		completeChunkUpload: connect.NewClient[v1.CompleteChunkUploadRequest, v1.CompleteChunkUploadResponse](
			httpClient,
			baseURL+StorageServiceCompleteChunkUploadProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CompleteChunkUpload")),
			connect.WithClientOptions(opts...),
		),
		getChunkDownloadURL: connect.NewClient[v1.GetChunkDownloadURLRequest, v1.GetChunkDownloadURLResponse](
			httpClient,
			baseURL+StorageServiceGetChunkDownloadURLProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GetChunkDownloadURL")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	createUploadRequest *connect.Client[v1.CreateUploadRequestRequest, v1.CreateUploadRequestResponse]
	completeChunkUpload *connect.Client[v1.CompleteChunkUploadRequest, v1.CompleteChunkUploadResponse]
	getChunkDownloadURL *connect.Client[v1.GetChunkDownloadURLRequest, v1.GetChunkDownloadURLResponse]
}

// CreateUploadRequest calls proto.cloud_drive.storage.v1.StorageService.CreateUploadRequest.
func (c *storageServiceClient) CreateUploadRequest(ctx context.Context, req *connect.Request[v1.CreateUploadRequestRequest]) (*connect.Response[v1.CreateUploadRequestResponse], error) {
	return c.createUploadRequest.CallUnary(ctx, req)
}

// CompleteChunkUpload calls proto.cloud_drive.storage.v1.StorageService.CompleteChunkUpload.
func (c *storageServiceClient) CompleteChunkUpload(ctx context.Context, req *connect.Request[v1.CompleteChunkUploadRequest]) (*connect.Response[v1.CompleteChunkUploadResponse], error) {
	return c.completeChunkUpload.CallUnary(ctx, req)
}

// GetChunkDownloadURL calls proto.cloud_drive.storage.v1.StorageService.GetChunkDownloadURL.
func (c *storageServiceClient) GetChunkDownloadURL(ctx context.Context, req *connect.Request[v1.GetChunkDownloadURLRequest]) (*connect.Response[v1.GetChunkDownloadURLResponse], error) {
	return c.getChunkDownloadURL.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the proto.cloud_drive.storage.v1.StorageService
// service.
type StorageServiceHandler interface {
	// CreateUploadRequest 创建一个上传请求，生成上传地址并返回给调用者。
	// 这里不负责上传，上传是交给其他程序进行的。
	// 这里只负责生成上传地址，并返回给调用者。
	// 但是这里需要使用文件块的方式
	CreateUploadRequest(context.Context, *connect.Request[v1.CreateUploadRequestRequest]) (*connect.Response[v1.CreateUploadRequestResponse], error)
	// CompleteChunkUpload 完成一个上传请求
	// 当客户端通过链接上传完毕后，将调用这个方法。这个方法将会对已经上传的内容进行验证
	CompleteChunkUpload(context.Context, *connect.Request[v1.CompleteChunkUploadRequest]) (*connect.Response[v1.CompleteChunkUploadResponse], error)
	// GetChunkDownloadURL 获取分块的下载地址
	// 这里不负责下载，下载是交给其他程序进行的。
	// 这里只负责生成下载地址，并返回给调用者。
	GetChunkDownloadURL(context.Context, *connect.Request[v1.GetChunkDownloadURLRequest]) (*connect.Response[v1.GetChunkDownloadURLResponse], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceMethods := v1.File_proto_cloud_drive_storage_v1_storage_proto.Services().ByName("StorageService").Methods()
	storageServiceCreateUploadRequestHandler := connect.NewUnaryHandler(
		StorageServiceCreateUploadRequestProcedure,
		svc.CreateUploadRequest,
		connect.WithSchema(storageServiceMethods.ByName("CreateUploadRequest")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCompleteChunkUploadHandler := connect.NewUnaryHandler(
		StorageServiceCompleteChunkUploadProcedure,
		svc.CompleteChunkUpload,
		connect.WithSchema(storageServiceMethods.ByName("CompleteChunkUpload")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetChunkDownloadURLHandler := connect.NewUnaryHandler(
		StorageServiceGetChunkDownloadURLProcedure,
		svc.GetChunkDownloadURL,
		connect.WithSchema(storageServiceMethods.ByName("GetChunkDownloadURL")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.cloud_drive.storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServiceCreateUploadRequestProcedure:
			storageServiceCreateUploadRequestHandler.ServeHTTP(w, r)
		case StorageServiceCompleteChunkUploadProcedure:
			storageServiceCompleteChunkUploadHandler.ServeHTTP(w, r)
		case StorageServiceGetChunkDownloadURLProcedure:
			storageServiceGetChunkDownloadURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) CreateUploadRequest(context.Context, *connect.Request[v1.CreateUploadRequestRequest]) (*connect.Response[v1.CreateUploadRequestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.storage.v1.StorageService.CreateUploadRequest is not implemented"))
}

func (UnimplementedStorageServiceHandler) CompleteChunkUpload(context.Context, *connect.Request[v1.CompleteChunkUploadRequest]) (*connect.Response[v1.CompleteChunkUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.storage.v1.StorageService.CompleteChunkUpload is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetChunkDownloadURL(context.Context, *connect.Request[v1.GetChunkDownloadURLRequest]) (*connect.Response[v1.GetChunkDownloadURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.storage.v1.StorageService.GetChunkDownloadURL is not implemented"))
}
