// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/cloud_drive/file/v1/file.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/EdgeStanding/cloud-drive-proto/gen/proto/cloud_drive/file/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "proto.cloud_drive.file.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceCreateDirectoryProcedure is the fully-qualified name of the FileService's
	// CreateDirectory RPC.
	FileServiceCreateDirectoryProcedure = "/proto.cloud_drive.file.v1.FileService/CreateDirectory"
	// FileServiceListFilesProcedure is the fully-qualified name of the FileService's ListFiles RPC.
	FileServiceListFilesProcedure = "/proto.cloud_drive.file.v1.FileService/ListFiles"
	// FileServiceDeleteFileProcedure is the fully-qualified name of the FileService's DeleteFile RPC.
	FileServiceDeleteFileProcedure = "/proto.cloud_drive.file.v1.FileService/DeleteFile"
	// FileServiceCreateFileProcedure is the fully-qualified name of the FileService's CreateFile RPC.
	FileServiceCreateFileProcedure = "/proto.cloud_drive.file.v1.FileService/CreateFile"
	// FileServiceGetFileProcedure is the fully-qualified name of the FileService's GetFile RPC.
	FileServiceGetFileProcedure = "/proto.cloud_drive.file.v1.FileService/GetFile"
	// FileServiceFileExistsProcedure is the fully-qualified name of the FileService's FileExists RPC.
	FileServiceFileExistsProcedure = "/proto.cloud_drive.file.v1.FileService/FileExists"
	// FileServiceListDeletedFilesProcedure is the fully-qualified name of the FileService's
	// ListDeletedFiles RPC.
	FileServiceListDeletedFilesProcedure = "/proto.cloud_drive.file.v1.FileService/ListDeletedFiles"
	// FileServiceRestoreFileProcedure is the fully-qualified name of the FileService's RestoreFile RPC.
	FileServiceRestoreFileProcedure = "/proto.cloud_drive.file.v1.FileService/RestoreFile"
	// FileServicePermanentlyDeleteFileProcedure is the fully-qualified name of the FileService's
	// PermanentlyDeleteFile RPC.
	FileServicePermanentlyDeleteFileProcedure = "/proto.cloud_drive.file.v1.FileService/PermanentlyDeleteFile"
	// FileServiceMoveFileProcedure is the fully-qualified name of the FileService's MoveFile RPC.
	FileServiceMoveFileProcedure = "/proto.cloud_drive.file.v1.FileService/MoveFile"
	// FileServiceCopyFileProcedure is the fully-qualified name of the FileService's CopyFile RPC.
	FileServiceCopyFileProcedure = "/proto.cloud_drive.file.v1.FileService/CopyFile"
	// FileServiceGetFileChunksProcedure is the fully-qualified name of the FileService's GetFileChunks
	// RPC.
	FileServiceGetFileChunksProcedure = "/proto.cloud_drive.file.v1.FileService/GetFileChunks"
	// FileServiceListRecycleBinProcedure is the fully-qualified name of the FileService's
	// ListRecycleBin RPC.
	FileServiceListRecycleBinProcedure = "/proto.cloud_drive.file.v1.FileService/ListRecycleBin"
	// FileServiceRestoreFromRecycleBinProcedure is the fully-qualified name of the FileService's
	// RestoreFromRecycleBin RPC.
	FileServiceRestoreFromRecycleBinProcedure = "/proto.cloud_drive.file.v1.FileService/RestoreFromRecycleBin"
	// FileServiceDeleteFromRecycleBinProcedure is the fully-qualified name of the FileService's
	// DeleteFromRecycleBin RPC.
	FileServiceDeleteFromRecycleBinProcedure = "/proto.cloud_drive.file.v1.FileService/DeleteFromRecycleBin"
	// FileServiceEmptyRecycleBinProcedure is the fully-qualified name of the FileService's
	// EmptyRecycleBin RPC.
	FileServiceEmptyRecycleBinProcedure = "/proto.cloud_drive.file.v1.FileService/EmptyRecycleBin"
)

// FileServiceClient is a client for the proto.cloud_drive.file.v1.FileService service.
type FileServiceClient interface {
	// CreateDirectory 创建目录
	CreateDirectory(context.Context, *connect.Request[v1.CreateDirectoryRequest]) (*connect.Response[v1.CreateDirectoryResponse], error)
	// ListFiles 列出目录下的文件
	ListFiles(context.Context, *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error)
	// DeleteFile 删除文件
	DeleteFile(context.Context, *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error)
	// CreateFile 创建文件
	CreateFile(context.Context, *connect.Request[v1.CreateFileRequest]) (*connect.Response[v1.CreateFileResponse], error)
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	FileExists(context.Context, *connect.Request[v1.FileExistsRequest]) (*connect.Response[v1.FileExistsResponse], error)
	// ListDeletedFiles 列出已删除的文件
	ListDeletedFiles(context.Context, *connect.Request[v1.ListDeletedFilesRequest]) (*connect.Response[v1.ListDeletedFilesResponse], error)
	// RestoreFile 恢复已删除的文件
	RestoreFile(context.Context, *connect.Request[v1.RestoreFileRequest]) (*connect.Response[v1.RestoreFileResponse], error)
	// PermanentlyDeleteFile 永久删除文件
	PermanentlyDeleteFile(context.Context, *connect.Request[v1.PermanentlyDeleteFileRequest]) (*connect.Response[v1.PermanentlyDeleteFileResponse], error)
	// MoveFile 移动文件
	MoveFile(context.Context, *connect.Request[v1.MoveFileRequest]) (*connect.Response[v1.MoveFileResponse], error)
	// CopyFile 复制文件
	CopyFile(context.Context, *connect.Request[v1.CopyFileRequest]) (*connect.Response[v1.CopyFileResponse], error)
	// GetFileChunks 获取文件分块列表
	GetFileChunks(context.Context, *connect.Request[v1.FileChunksRequest]) (*connect.Response[v1.FileChunksResponse], error)
	// 列出回收站中的文件
	ListRecycleBin(context.Context, *connect.Request[v1.ListRecycleBinRequest]) (*connect.Response[v1.ListRecycleBinResponse], error)
	// 从回收站恢复文件
	RestoreFromRecycleBin(context.Context, *connect.Request[v1.RestoreFromRecycleBinRequest]) (*connect.Response[v1.RestoreFromRecycleBinResponse], error)
	// 永久删除回收站中的文件
	DeleteFromRecycleBin(context.Context, *connect.Request[v1.DeleteFromRecycleBinRequest]) (*connect.Response[v1.DeleteFromRecycleBinResponse], error)
	// 清空回收站
	EmptyRecycleBin(context.Context, *connect.Request[v1.EmptyRecycleBinRequest]) (*connect.Response[v1.EmptyRecycleBinResponse], error)
}

// NewFileServiceClient constructs a client for the proto.cloud_drive.file.v1.FileService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fileServiceMethods := v1.File_proto_cloud_drive_file_v1_file_proto.Services().ByName("FileService").Methods()
	return &fileServiceClient{
		createDirectory: connect.NewClient[v1.CreateDirectoryRequest, v1.CreateDirectoryResponse](
			httpClient,
			baseURL+FileServiceCreateDirectoryProcedure,
			connect.WithSchema(fileServiceMethods.ByName("CreateDirectory")),
			connect.WithClientOptions(opts...),
		),
		listFiles: connect.NewClient[v1.ListFilesRequest, v1.ListFilesResponse](
			httpClient,
			baseURL+FileServiceListFilesProcedure,
			connect.WithSchema(fileServiceMethods.ByName("ListFiles")),
			connect.WithClientOptions(opts...),
		),
		deleteFile: connect.NewClient[v1.DeleteFileRequest, v1.DeleteFileResponse](
			httpClient,
			baseURL+FileServiceDeleteFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("DeleteFile")),
			connect.WithClientOptions(opts...),
		),
		createFile: connect.NewClient[v1.CreateFileRequest, v1.CreateFileResponse](
			httpClient,
			baseURL+FileServiceCreateFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("CreateFile")),
			connect.WithClientOptions(opts...),
		),
		getFile: connect.NewClient[v1.GetFileRequest, v1.GetFileResponse](
			httpClient,
			baseURL+FileServiceGetFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetFile")),
			connect.WithClientOptions(opts...),
		),
		fileExists: connect.NewClient[v1.FileExistsRequest, v1.FileExistsResponse](
			httpClient,
			baseURL+FileServiceFileExistsProcedure,
			connect.WithSchema(fileServiceMethods.ByName("FileExists")),
			connect.WithClientOptions(opts...),
		),
		listDeletedFiles: connect.NewClient[v1.ListDeletedFilesRequest, v1.ListDeletedFilesResponse](
			httpClient,
			baseURL+FileServiceListDeletedFilesProcedure,
			connect.WithSchema(fileServiceMethods.ByName("ListDeletedFiles")),
			connect.WithClientOptions(opts...),
		),
		restoreFile: connect.NewClient[v1.RestoreFileRequest, v1.RestoreFileResponse](
			httpClient,
			baseURL+FileServiceRestoreFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("RestoreFile")),
			connect.WithClientOptions(opts...),
		),
		permanentlyDeleteFile: connect.NewClient[v1.PermanentlyDeleteFileRequest, v1.PermanentlyDeleteFileResponse](
			httpClient,
			baseURL+FileServicePermanentlyDeleteFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("PermanentlyDeleteFile")),
			connect.WithClientOptions(opts...),
		),
		moveFile: connect.NewClient[v1.MoveFileRequest, v1.MoveFileResponse](
			httpClient,
			baseURL+FileServiceMoveFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("MoveFile")),
			connect.WithClientOptions(opts...),
		),
		copyFile: connect.NewClient[v1.CopyFileRequest, v1.CopyFileResponse](
			httpClient,
			baseURL+FileServiceCopyFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("CopyFile")),
			connect.WithClientOptions(opts...),
		),
		getFileChunks: connect.NewClient[v1.FileChunksRequest, v1.FileChunksResponse](
			httpClient,
			baseURL+FileServiceGetFileChunksProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetFileChunks")),
			connect.WithClientOptions(opts...),
		),
		listRecycleBin: connect.NewClient[v1.ListRecycleBinRequest, v1.ListRecycleBinResponse](
			httpClient,
			baseURL+FileServiceListRecycleBinProcedure,
			connect.WithSchema(fileServiceMethods.ByName("ListRecycleBin")),
			connect.WithClientOptions(opts...),
		),
		restoreFromRecycleBin: connect.NewClient[v1.RestoreFromRecycleBinRequest, v1.RestoreFromRecycleBinResponse](
			httpClient,
			baseURL+FileServiceRestoreFromRecycleBinProcedure,
			connect.WithSchema(fileServiceMethods.ByName("RestoreFromRecycleBin")),
			connect.WithClientOptions(opts...),
		),
		deleteFromRecycleBin: connect.NewClient[v1.DeleteFromRecycleBinRequest, v1.DeleteFromRecycleBinResponse](
			httpClient,
			baseURL+FileServiceDeleteFromRecycleBinProcedure,
			connect.WithSchema(fileServiceMethods.ByName("DeleteFromRecycleBin")),
			connect.WithClientOptions(opts...),
		),
		emptyRecycleBin: connect.NewClient[v1.EmptyRecycleBinRequest, v1.EmptyRecycleBinResponse](
			httpClient,
			baseURL+FileServiceEmptyRecycleBinProcedure,
			connect.WithSchema(fileServiceMethods.ByName("EmptyRecycleBin")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	createDirectory       *connect.Client[v1.CreateDirectoryRequest, v1.CreateDirectoryResponse]
	listFiles             *connect.Client[v1.ListFilesRequest, v1.ListFilesResponse]
	deleteFile            *connect.Client[v1.DeleteFileRequest, v1.DeleteFileResponse]
	createFile            *connect.Client[v1.CreateFileRequest, v1.CreateFileResponse]
	getFile               *connect.Client[v1.GetFileRequest, v1.GetFileResponse]
	fileExists            *connect.Client[v1.FileExistsRequest, v1.FileExistsResponse]
	listDeletedFiles      *connect.Client[v1.ListDeletedFilesRequest, v1.ListDeletedFilesResponse]
	restoreFile           *connect.Client[v1.RestoreFileRequest, v1.RestoreFileResponse]
	permanentlyDeleteFile *connect.Client[v1.PermanentlyDeleteFileRequest, v1.PermanentlyDeleteFileResponse]
	moveFile              *connect.Client[v1.MoveFileRequest, v1.MoveFileResponse]
	copyFile              *connect.Client[v1.CopyFileRequest, v1.CopyFileResponse]
	getFileChunks         *connect.Client[v1.FileChunksRequest, v1.FileChunksResponse]
	listRecycleBin        *connect.Client[v1.ListRecycleBinRequest, v1.ListRecycleBinResponse]
	restoreFromRecycleBin *connect.Client[v1.RestoreFromRecycleBinRequest, v1.RestoreFromRecycleBinResponse]
	deleteFromRecycleBin  *connect.Client[v1.DeleteFromRecycleBinRequest, v1.DeleteFromRecycleBinResponse]
	emptyRecycleBin       *connect.Client[v1.EmptyRecycleBinRequest, v1.EmptyRecycleBinResponse]
}

// CreateDirectory calls proto.cloud_drive.file.v1.FileService.CreateDirectory.
func (c *fileServiceClient) CreateDirectory(ctx context.Context, req *connect.Request[v1.CreateDirectoryRequest]) (*connect.Response[v1.CreateDirectoryResponse], error) {
	return c.createDirectory.CallUnary(ctx, req)
}

// ListFiles calls proto.cloud_drive.file.v1.FileService.ListFiles.
func (c *fileServiceClient) ListFiles(ctx context.Context, req *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error) {
	return c.listFiles.CallUnary(ctx, req)
}

// DeleteFile calls proto.cloud_drive.file.v1.FileService.DeleteFile.
func (c *fileServiceClient) DeleteFile(ctx context.Context, req *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error) {
	return c.deleteFile.CallUnary(ctx, req)
}

// CreateFile calls proto.cloud_drive.file.v1.FileService.CreateFile.
func (c *fileServiceClient) CreateFile(ctx context.Context, req *connect.Request[v1.CreateFileRequest]) (*connect.Response[v1.CreateFileResponse], error) {
	return c.createFile.CallUnary(ctx, req)
}

// GetFile calls proto.cloud_drive.file.v1.FileService.GetFile.
func (c *fileServiceClient) GetFile(ctx context.Context, req *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return c.getFile.CallUnary(ctx, req)
}

// FileExists calls proto.cloud_drive.file.v1.FileService.FileExists.
func (c *fileServiceClient) FileExists(ctx context.Context, req *connect.Request[v1.FileExistsRequest]) (*connect.Response[v1.FileExistsResponse], error) {
	return c.fileExists.CallUnary(ctx, req)
}

// ListDeletedFiles calls proto.cloud_drive.file.v1.FileService.ListDeletedFiles.
func (c *fileServiceClient) ListDeletedFiles(ctx context.Context, req *connect.Request[v1.ListDeletedFilesRequest]) (*connect.Response[v1.ListDeletedFilesResponse], error) {
	return c.listDeletedFiles.CallUnary(ctx, req)
}

// RestoreFile calls proto.cloud_drive.file.v1.FileService.RestoreFile.
func (c *fileServiceClient) RestoreFile(ctx context.Context, req *connect.Request[v1.RestoreFileRequest]) (*connect.Response[v1.RestoreFileResponse], error) {
	return c.restoreFile.CallUnary(ctx, req)
}

// PermanentlyDeleteFile calls proto.cloud_drive.file.v1.FileService.PermanentlyDeleteFile.
func (c *fileServiceClient) PermanentlyDeleteFile(ctx context.Context, req *connect.Request[v1.PermanentlyDeleteFileRequest]) (*connect.Response[v1.PermanentlyDeleteFileResponse], error) {
	return c.permanentlyDeleteFile.CallUnary(ctx, req)
}

// MoveFile calls proto.cloud_drive.file.v1.FileService.MoveFile.
func (c *fileServiceClient) MoveFile(ctx context.Context, req *connect.Request[v1.MoveFileRequest]) (*connect.Response[v1.MoveFileResponse], error) {
	return c.moveFile.CallUnary(ctx, req)
}

// CopyFile calls proto.cloud_drive.file.v1.FileService.CopyFile.
func (c *fileServiceClient) CopyFile(ctx context.Context, req *connect.Request[v1.CopyFileRequest]) (*connect.Response[v1.CopyFileResponse], error) {
	return c.copyFile.CallUnary(ctx, req)
}

// GetFileChunks calls proto.cloud_drive.file.v1.FileService.GetFileChunks.
func (c *fileServiceClient) GetFileChunks(ctx context.Context, req *connect.Request[v1.FileChunksRequest]) (*connect.Response[v1.FileChunksResponse], error) {
	return c.getFileChunks.CallUnary(ctx, req)
}

// ListRecycleBin calls proto.cloud_drive.file.v1.FileService.ListRecycleBin.
func (c *fileServiceClient) ListRecycleBin(ctx context.Context, req *connect.Request[v1.ListRecycleBinRequest]) (*connect.Response[v1.ListRecycleBinResponse], error) {
	return c.listRecycleBin.CallUnary(ctx, req)
}

// RestoreFromRecycleBin calls proto.cloud_drive.file.v1.FileService.RestoreFromRecycleBin.
func (c *fileServiceClient) RestoreFromRecycleBin(ctx context.Context, req *connect.Request[v1.RestoreFromRecycleBinRequest]) (*connect.Response[v1.RestoreFromRecycleBinResponse], error) {
	return c.restoreFromRecycleBin.CallUnary(ctx, req)
}

// DeleteFromRecycleBin calls proto.cloud_drive.file.v1.FileService.DeleteFromRecycleBin.
func (c *fileServiceClient) DeleteFromRecycleBin(ctx context.Context, req *connect.Request[v1.DeleteFromRecycleBinRequest]) (*connect.Response[v1.DeleteFromRecycleBinResponse], error) {
	return c.deleteFromRecycleBin.CallUnary(ctx, req)
}

// EmptyRecycleBin calls proto.cloud_drive.file.v1.FileService.EmptyRecycleBin.
func (c *fileServiceClient) EmptyRecycleBin(ctx context.Context, req *connect.Request[v1.EmptyRecycleBinRequest]) (*connect.Response[v1.EmptyRecycleBinResponse], error) {
	return c.emptyRecycleBin.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the proto.cloud_drive.file.v1.FileService service.
type FileServiceHandler interface {
	// CreateDirectory 创建目录
	CreateDirectory(context.Context, *connect.Request[v1.CreateDirectoryRequest]) (*connect.Response[v1.CreateDirectoryResponse], error)
	// ListFiles 列出目录下的文件
	ListFiles(context.Context, *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error)
	// DeleteFile 删除文件
	DeleteFile(context.Context, *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error)
	// CreateFile 创建文件
	CreateFile(context.Context, *connect.Request[v1.CreateFileRequest]) (*connect.Response[v1.CreateFileResponse], error)
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	FileExists(context.Context, *connect.Request[v1.FileExistsRequest]) (*connect.Response[v1.FileExistsResponse], error)
	// ListDeletedFiles 列出已删除的文件
	ListDeletedFiles(context.Context, *connect.Request[v1.ListDeletedFilesRequest]) (*connect.Response[v1.ListDeletedFilesResponse], error)
	// RestoreFile 恢复已删除的文件
	RestoreFile(context.Context, *connect.Request[v1.RestoreFileRequest]) (*connect.Response[v1.RestoreFileResponse], error)
	// PermanentlyDeleteFile 永久删除文件
	PermanentlyDeleteFile(context.Context, *connect.Request[v1.PermanentlyDeleteFileRequest]) (*connect.Response[v1.PermanentlyDeleteFileResponse], error)
	// MoveFile 移动文件
	MoveFile(context.Context, *connect.Request[v1.MoveFileRequest]) (*connect.Response[v1.MoveFileResponse], error)
	// CopyFile 复制文件
	CopyFile(context.Context, *connect.Request[v1.CopyFileRequest]) (*connect.Response[v1.CopyFileResponse], error)
	// GetFileChunks 获取文件分块列表
	GetFileChunks(context.Context, *connect.Request[v1.FileChunksRequest]) (*connect.Response[v1.FileChunksResponse], error)
	// 列出回收站中的文件
	ListRecycleBin(context.Context, *connect.Request[v1.ListRecycleBinRequest]) (*connect.Response[v1.ListRecycleBinResponse], error)
	// 从回收站恢复文件
	RestoreFromRecycleBin(context.Context, *connect.Request[v1.RestoreFromRecycleBinRequest]) (*connect.Response[v1.RestoreFromRecycleBinResponse], error)
	// 永久删除回收站中的文件
	DeleteFromRecycleBin(context.Context, *connect.Request[v1.DeleteFromRecycleBinRequest]) (*connect.Response[v1.DeleteFromRecycleBinResponse], error)
	// 清空回收站
	EmptyRecycleBin(context.Context, *connect.Request[v1.EmptyRecycleBinRequest]) (*connect.Response[v1.EmptyRecycleBinResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceMethods := v1.File_proto_cloud_drive_file_v1_file_proto.Services().ByName("FileService").Methods()
	fileServiceCreateDirectoryHandler := connect.NewUnaryHandler(
		FileServiceCreateDirectoryProcedure,
		svc.CreateDirectory,
		connect.WithSchema(fileServiceMethods.ByName("CreateDirectory")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceListFilesHandler := connect.NewUnaryHandler(
		FileServiceListFilesProcedure,
		svc.ListFiles,
		connect.WithSchema(fileServiceMethods.ByName("ListFiles")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceDeleteFileHandler := connect.NewUnaryHandler(
		FileServiceDeleteFileProcedure,
		svc.DeleteFile,
		connect.WithSchema(fileServiceMethods.ByName("DeleteFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceCreateFileHandler := connect.NewUnaryHandler(
		FileServiceCreateFileProcedure,
		svc.CreateFile,
		connect.WithSchema(fileServiceMethods.ByName("CreateFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetFileHandler := connect.NewUnaryHandler(
		FileServiceGetFileProcedure,
		svc.GetFile,
		connect.WithSchema(fileServiceMethods.ByName("GetFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceFileExistsHandler := connect.NewUnaryHandler(
		FileServiceFileExistsProcedure,
		svc.FileExists,
		connect.WithSchema(fileServiceMethods.ByName("FileExists")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceListDeletedFilesHandler := connect.NewUnaryHandler(
		FileServiceListDeletedFilesProcedure,
		svc.ListDeletedFiles,
		connect.WithSchema(fileServiceMethods.ByName("ListDeletedFiles")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceRestoreFileHandler := connect.NewUnaryHandler(
		FileServiceRestoreFileProcedure,
		svc.RestoreFile,
		connect.WithSchema(fileServiceMethods.ByName("RestoreFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServicePermanentlyDeleteFileHandler := connect.NewUnaryHandler(
		FileServicePermanentlyDeleteFileProcedure,
		svc.PermanentlyDeleteFile,
		connect.WithSchema(fileServiceMethods.ByName("PermanentlyDeleteFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceMoveFileHandler := connect.NewUnaryHandler(
		FileServiceMoveFileProcedure,
		svc.MoveFile,
		connect.WithSchema(fileServiceMethods.ByName("MoveFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceCopyFileHandler := connect.NewUnaryHandler(
		FileServiceCopyFileProcedure,
		svc.CopyFile,
		connect.WithSchema(fileServiceMethods.ByName("CopyFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetFileChunksHandler := connect.NewUnaryHandler(
		FileServiceGetFileChunksProcedure,
		svc.GetFileChunks,
		connect.WithSchema(fileServiceMethods.ByName("GetFileChunks")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceListRecycleBinHandler := connect.NewUnaryHandler(
		FileServiceListRecycleBinProcedure,
		svc.ListRecycleBin,
		connect.WithSchema(fileServiceMethods.ByName("ListRecycleBin")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceRestoreFromRecycleBinHandler := connect.NewUnaryHandler(
		FileServiceRestoreFromRecycleBinProcedure,
		svc.RestoreFromRecycleBin,
		connect.WithSchema(fileServiceMethods.ByName("RestoreFromRecycleBin")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceDeleteFromRecycleBinHandler := connect.NewUnaryHandler(
		FileServiceDeleteFromRecycleBinProcedure,
		svc.DeleteFromRecycleBin,
		connect.WithSchema(fileServiceMethods.ByName("DeleteFromRecycleBin")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceEmptyRecycleBinHandler := connect.NewUnaryHandler(
		FileServiceEmptyRecycleBinProcedure,
		svc.EmptyRecycleBin,
		connect.WithSchema(fileServiceMethods.ByName("EmptyRecycleBin")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.cloud_drive.file.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceCreateDirectoryProcedure:
			fileServiceCreateDirectoryHandler.ServeHTTP(w, r)
		case FileServiceListFilesProcedure:
			fileServiceListFilesHandler.ServeHTTP(w, r)
		case FileServiceDeleteFileProcedure:
			fileServiceDeleteFileHandler.ServeHTTP(w, r)
		case FileServiceCreateFileProcedure:
			fileServiceCreateFileHandler.ServeHTTP(w, r)
		case FileServiceGetFileProcedure:
			fileServiceGetFileHandler.ServeHTTP(w, r)
		case FileServiceFileExistsProcedure:
			fileServiceFileExistsHandler.ServeHTTP(w, r)
		case FileServiceListDeletedFilesProcedure:
			fileServiceListDeletedFilesHandler.ServeHTTP(w, r)
		case FileServiceRestoreFileProcedure:
			fileServiceRestoreFileHandler.ServeHTTP(w, r)
		case FileServicePermanentlyDeleteFileProcedure:
			fileServicePermanentlyDeleteFileHandler.ServeHTTP(w, r)
		case FileServiceMoveFileProcedure:
			fileServiceMoveFileHandler.ServeHTTP(w, r)
		case FileServiceCopyFileProcedure:
			fileServiceCopyFileHandler.ServeHTTP(w, r)
		case FileServiceGetFileChunksProcedure:
			fileServiceGetFileChunksHandler.ServeHTTP(w, r)
		case FileServiceListRecycleBinProcedure:
			fileServiceListRecycleBinHandler.ServeHTTP(w, r)
		case FileServiceRestoreFromRecycleBinProcedure:
			fileServiceRestoreFromRecycleBinHandler.ServeHTTP(w, r)
		case FileServiceDeleteFromRecycleBinProcedure:
			fileServiceDeleteFromRecycleBinHandler.ServeHTTP(w, r)
		case FileServiceEmptyRecycleBinProcedure:
			fileServiceEmptyRecycleBinHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) CreateDirectory(context.Context, *connect.Request[v1.CreateDirectoryRequest]) (*connect.Response[v1.CreateDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.CreateDirectory is not implemented"))
}

func (UnimplementedFileServiceHandler) ListFiles(context.Context, *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.ListFiles is not implemented"))
}

func (UnimplementedFileServiceHandler) DeleteFile(context.Context, *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.DeleteFile is not implemented"))
}

func (UnimplementedFileServiceHandler) CreateFile(context.Context, *connect.Request[v1.CreateFileRequest]) (*connect.Response[v1.CreateFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.CreateFile is not implemented"))
}

func (UnimplementedFileServiceHandler) GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.GetFile is not implemented"))
}

func (UnimplementedFileServiceHandler) FileExists(context.Context, *connect.Request[v1.FileExistsRequest]) (*connect.Response[v1.FileExistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.FileExists is not implemented"))
}

func (UnimplementedFileServiceHandler) ListDeletedFiles(context.Context, *connect.Request[v1.ListDeletedFilesRequest]) (*connect.Response[v1.ListDeletedFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.ListDeletedFiles is not implemented"))
}

func (UnimplementedFileServiceHandler) RestoreFile(context.Context, *connect.Request[v1.RestoreFileRequest]) (*connect.Response[v1.RestoreFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.RestoreFile is not implemented"))
}

func (UnimplementedFileServiceHandler) PermanentlyDeleteFile(context.Context, *connect.Request[v1.PermanentlyDeleteFileRequest]) (*connect.Response[v1.PermanentlyDeleteFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.PermanentlyDeleteFile is not implemented"))
}

func (UnimplementedFileServiceHandler) MoveFile(context.Context, *connect.Request[v1.MoveFileRequest]) (*connect.Response[v1.MoveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.MoveFile is not implemented"))
}

func (UnimplementedFileServiceHandler) CopyFile(context.Context, *connect.Request[v1.CopyFileRequest]) (*connect.Response[v1.CopyFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.CopyFile is not implemented"))
}

func (UnimplementedFileServiceHandler) GetFileChunks(context.Context, *connect.Request[v1.FileChunksRequest]) (*connect.Response[v1.FileChunksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.GetFileChunks is not implemented"))
}

func (UnimplementedFileServiceHandler) ListRecycleBin(context.Context, *connect.Request[v1.ListRecycleBinRequest]) (*connect.Response[v1.ListRecycleBinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.ListRecycleBin is not implemented"))
}

func (UnimplementedFileServiceHandler) RestoreFromRecycleBin(context.Context, *connect.Request[v1.RestoreFromRecycleBinRequest]) (*connect.Response[v1.RestoreFromRecycleBinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.RestoreFromRecycleBin is not implemented"))
}

func (UnimplementedFileServiceHandler) DeleteFromRecycleBin(context.Context, *connect.Request[v1.DeleteFromRecycleBinRequest]) (*connect.Response[v1.DeleteFromRecycleBinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.DeleteFromRecycleBin is not implemented"))
}

func (UnimplementedFileServiceHandler) EmptyRecycleBin(context.Context, *connect.Request[v1.EmptyRecycleBinRequest]) (*connect.Response[v1.EmptyRecycleBinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cloud_drive.file.v1.FileService.EmptyRecycleBin is not implemented"))
}
